#include "thingProperties.h"
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

#define CH_PD 44 //sinal de controle de CH_PD
#define RST 46 //sinal de controle de RST
#define GPIO0 48 //sinal de controle de GPIO0
#define GPIO2 50 //sinal de controle de GPIO0
uint8_t R1_On[] = {0xA0, 0x01, 0x01, 0xA2};
uint8_t R1_Off[] = {0xA0, 0x01, 0x00, 0xA1};
uint8_t R2_On[] = {0xA0, 0x02, 0x01, 0xA3};
uint8_t R2_Off[] = {0xA0, 0x02, 0x00, 0xA2};
uint8_t R3_On[] = {0xA0, 0x03, 0x01, 0xA4};
uint8_t R3_Off[] = {0xA0, 0x03, 0x00, 0xA3};
uint8_t R4_On[] = {0xA0, 0x04, 0x01, 0xA5};
uint8_t R4_Off[] = {0xA0, 0x04, 0x00, 0xA4};

IPAddress ip(192, 168, 1, 100);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress dns(192, 168, 1, 1);

unsigned long timeMillis = millis();
static unsigned long timeMillisAntCon = timeMillis;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(CH_PD,OUTPUT);
  pinMode(RST,OUTPUT);
  pinMode(GPIO0,OUTPUT);
  pinMode(GPIO2,OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);
  digitalWrite(CH_PD,HIGH);
  digitalWrite(RST,HIGH); 
  digitalWrite(GPIO0,HIGH);
  digitalWrite(GPIO2,HIGH);
  
  //ip fixo
  WiFi.config(ip, gateway, subnet, dns);
  
  //ota
  ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  ArduinoOTA.setHostname("ESP_100_arduino_iot");

  // No authentication by default
  ArduinoOTA.setPassword("espadmin100");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }
    Serial.println("Start updating " + type);
  });
  
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
    ESP.restart();
  });
  
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  
}

void loop() {
  ArduinoOTA.handle();
  ArduinoCloud.update();
  
  if (ArduinoCloud.connected()){
    timeMillisAntCon = timeMillis;
    Serial.println("Connect OK to Arduino IOT");
    text_1 = "Connect OK to Arduino IOT";
  }
  else if (timeMillis - timeMillisAntCon > 120000){
    Serial.println("Connect FAIL to Arduino IOT");
    text_1 = "Connect FAIL to Arduino IOT";
    ESP.restart();
  }
}
void onSwitch1Change()  {

if(switch1){
  Serial.println("RELAY on");
  Serial.write(R1_On, 4);
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED on (HIGH is the voltage level)
  delay(500);                       // wait for a second
  digitalWrite(LED_BUILTIN, HIGH);    // turn the LED off by making the voltage LOW
  Serial.println("RELAY 1 on HEX sent");
  delay(1500);
  Serial.println("RELAY off");
  Serial.write(R1_Off, 4);
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED on (HIGH is the voltage level)
  delay(500);                       // wait for a second
  digitalWrite(LED_BUILTIN, HIGH);    // turn the LED off by making the voltage LOW
  Serial.println("RELAY 1 off HEX sent");
  Serial.flush();
  text_1 = "R1";
  }
  else{

  }

}

void onSwitch2Change()  {
if(switch2){
  Serial.println("RELAY on");
  Serial.write(R2_On, 4);
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED on (HIGH is the voltage level)
  delay(500);                       // wait for a second
  digitalWrite(LED_BUILTIN, HIGH);    // turn the LED off by making the voltage LOW
  Serial.println("RELAY 2 on HEX sent");
  delay(1500);
  Serial.println("RELAY off");
  Serial.write(R2_Off, 4);
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED on (HIGH is the voltage level)
  delay(500);                       // wait for a second
  digitalWrite(LED_BUILTIN, HIGH);    // turn the LED off by making the voltage LOW
  Serial.println("RELAY 2 off HEX sent");
  Serial.flush();
  text_1 = "R1";
  }

  else{

  }
}
